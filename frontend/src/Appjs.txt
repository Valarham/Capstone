import './App.css';
import { Routes, Route, useLocation, Navigate, useRoutes } from 'react-router-dom';
// import { Routes, Route, useLocation, Navigate } from 'react-router-dom';

import { loadUser } from './actions/userAction';
import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
// pages화면에 진짜로 마지막 단계의 화면 출력
import Blog from './pages/Blog';
import User from './pages/User_myshop';
import Login from './pages/Login';
import NotFound from './pages/Page404';
import Register from './pages/Register';
import Products from './pages/Products';
import DashboardApp from './pages/DashboardApp';
// layouts
import DashboardLayout from './layouts/dashboard';
import LogoOnlyLayout from './layouts/LogoOnlyLayout';
// routes
import Router from './routes';

// theme
import ThemeProvider from './theme';
// components  -> 페이지 안에 구성하고 있는 것들을 의미함. -> components는
// 모여서 pages를 구성함.
import ScrollToTop from './components/ScrollToTop';
import { BaseOptionChartStyle } from './components/chart/BaseOptionChart';

// ----------------------------------------------------------------------
/**
 * export default function Router() {
  return useRoutes([
    {
      path: '/dashboard',
      element: <DashboardLayout />,
      children: [
        { path: 'app', element: <DashboardApp /> },
        { path: 'user', element: <User /> },
        { path: 'products', element: <Products /> },
        { path: 'blog', element: <Blog /> },
      ],
    },
    {
      path: '/',
      element: <LogoOnlyLayout />,
      children: [
        { path: '/', element: <Navigate to="/dashboard/app" /> },
        { path: 'login', element: <Login /> },
        { path: 'register', element: <Register /> },
        { path: '404', element: <NotFound /> },
        { path: '*', element: <Navigate to="/404" /> },
      ],
    },
    { path: '*', element: <Navigate to="/404" replace /> },
  ]);
}
 */
export default function App() {
  const dispatch = useDispatch();
  const { pathname } = useLocation();
  // const [stripeApiKey, setStripeApiKey] = useState("");

  // async function getStripeApiKey() {
  //   const { data } = await axios.get('/api/v1/stripeapikey');
  //   setStripeApiKey(data.stripeApiKey);
  // }

  useEffect(() => {
    dispatch(loadUser());
    // getStripeApiKey();
  }, [dispatch]);

  // always scroll to top on route/path change
  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    });
  }, [pathname]);
  // disable right click
  window.addEventListener('contextmenu', (e) => e.preventDefault());
  window.addEventListener('keydown', (e) => {
    if (e.keyCode === 123) e.preventDefault();
    if (e.ctrlKey && e.shiftKey && e.keyCode === 73) e.preventDefault();
    if (e.ctrlKey && e.shiftKey && e.keyCode === 74) e.preventDefault();
  });
  // <Routes>
  //   <Route path="/dashboard" element={<DashboardLayout />} />
  //   <Route path="/app" element={<DashboardApp />} />
  //   <Route path="/user" element={<User />} />
  //   <Route path="/products" element={<Products />} />
  //   <Route path="/blog" element={<Blog />} />

  //   {/* <Route path="/" element={<LogoOnlyLayout />} /> */}

  //   <Route path="/" element={<Navigate to="/dashboard/app" />} />
  //   <Route path="login" element={<Login />} />
  //   <Route path="register" element={<Register />} />
  //   <Route path="404" element={<NotFound />} />
  //   <Route path="*" element={<Navigate to="/404" />} />

  //   <Route path="*" element={<Navigate to="/404" replace />} />
  // </Routes>,
  return (
    <ThemeProvider>
      <ScrollToTop />
      <BaseOptionChartStyle />
      <Router />
    </ThemeProvider>
  );
}
